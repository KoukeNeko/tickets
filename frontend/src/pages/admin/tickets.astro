---
import Layout from "@layouts/Layout.astro";
import AdminNav from "@components/AdminNav.astro";
import * as i18n from "src/i18n";
const lang = i18n.local(Astro.url.pathname);
const t = i18n.t(lang, {
	title: {
		"zh-Hant": "管理後台",
		"zh-Hans": "管理后台",
		en: "Admin Dashboard"
	},
	description: {
		"zh-Hant": "票券管理系統後台總覽",
		"zh-Hans": "票券管理系统后台总览",
		en: "Ticket management system admin dashboard"
	}
});
const l = i18n.l(Astro.url);
---

<Layout i18n={t.t} path="" title={t.title} theme="#333" lang={lang}>
	<AdminNav />
	<main>
		<h1>票種</h1>

		<section class="ticket-overview">
			<div class="table-container">
				<table class="tickets-table">
					<thead>
						<tr>
							<th>票種</th>
							<th>開始時間</th>
							<th>結束時間</th>
							<th>狀態</th>
							<th>總數量</th>
							<th>操作</th>
						</tr>
					</thead>
					<tbody id="tickets-tbody">
						<!-- Tickets will be rendered here by JavaScript -->
					</tbody>
				</table>
			</div>
		</section>

		<section class="add-ticket-section">
			<button class="button add-ticket-btn" id="add-ticket-btn">
				<span>+ 新增票種</span>
			</button>
		</section>
	</main>

	<!-- HTML Templates -->
	<template id="ticket-row-template">
		<tr>
			<td data-label="票種" class="ticket-name">
				<span class="display-value ticket-label"></span>
			</td>
			<td data-label="開始時間" class="time-cell">
				<span class="display-value sale-start"></span>
			</td>
			<td data-label="結束時間" class="time-cell">
				<span class="display-value sale-end"></span>
			</td>
			<td data-label="狀態" class="status-cell">
				<span class="display-value"><span class="status-badge"></span></span>
			</td>
			<td data-label="總數量" class="quantity">
				<span class="display-value quantity-value"></span>
			</td>
			<td data-label="操作" class="actions-cell">
				<div class="action-buttons">
					<button class="edit-btn button" data-action="edit">編輯</button>
					<button class="delete-btn button delete" data-action="delete">刪除</button>
				</div>
			</td>
		</tr>
	</template>

	<!-- Template kept for structural reference (not used for editing anymore) -->
	<template id="new-ticket-row-template"></template>

	<!-- Modal for Add/Edit Ticket -->
	<div id="ticket-modal-overlay" class="modal-overlay" style="display:none;">
		<div class="modal" role="dialog" aria-modal="true" aria-labelledby="ticket-modal-title">
			<h2 id="ticket-modal-title">編輯票種</h2>
			<form id="ticket-form">
				<div class="form-grid">
					<label>
						<span>票種名稱</span>
						<input id="ticket-name-input" name="name" type="text" required placeholder="輸入票種名稱" />
					</label>
					<label>
						<span>開始時間</span>
						<input id="ticket-start-input" name="saleStart" type="datetime-local" />
					</label>
					<label>
						<span>結束時間</span>
						<input id="ticket-end-input" name="saleEnd" type="datetime-local" />
					</label>
					<label>
						<span>總數量 (留空=不限定)</span>
						<input id="ticket-quantity-input" name="quantity" type="number" min="0" />
					</label>
					<div class="status-readonly">
						<span>狀態：</span><span id="ticket-status-display" class="status-badge"></span>
					</div>
				</div>
				<div class="modal-actions">
					<button type="submit" class="button primary" id="ticket-save-btn">儲存</button>
					<button type="button" class="button" id="ticket-cancel-btn">取消</button>
				</div>
			</form>
		</div>
	</div>

	<script is:inline>
		// Demo ticket data - fetch from frontend
		const DEMO_TICKETS = [
			{
				id: 1,
				name: "學生票（第二波）",
				saleStart: "2025-02-09T20:00",
				saleEnd: "2025-11-01T00:00",
				quantity: 426
			},
			{
				id: 2,
				name: "普通票（第二波）",
				saleStart: "2025-02-09T20:00",
				saleEnd: "2025-02-22T23:59",
				quantity: 47
			},
			{
				id: 3,
				name: "小石放煙火",
				saleStart: "2025-01-01T00:00",
				saleEnd: "2025-02-01T23:59",
				quantity: 10
			},
			{
				id: 4,
				name: "學生票（第一波）",
				saleStart: "2025-01-12T20:00",
				saleEnd: "2025-01-25T23:59",
				quantity: 530
			},
			{
				id: 5,
				name: "一般票（第一波）",
				saleStart: "2025-01-12T20:00",
				saleEnd: "2025-01-25T23:59",
				quantity: 70
			},
			{
				id: 6,
				name: "講者邀請票",
				saleStart: "2024-12-21T00:00",
				saleEnd: "2025-02-01T23:59",
				quantity: 90
			},
			{
				id: 7,
				name: "邀請票",
				saleStart: "2024-12-21T00:00",
				saleEnd: "2025-02-01T23:59",
				quantity: "不限定數量"
			},
			{
				id: 8,
				name: "邀請票（遠道而來票）",
				saleStart: "2024-12-21T00:00",
				saleEnd: "2025-02-01T23:59",
				quantity: 100
			},
			{
				id: 9,
				name: "邀請票（SITCON x OSCVPass 開源貢獻票）",
				saleStart: "2024-12-21T00:00",
				saleEnd: "2025-02-01T23:59",
				quantity: 100
			},
			{
				id: 10,
				name: "邀請票（CfP 抽獎活動）",
				saleStart: "2024-12-21T00:00",
				saleEnd: "2025-02-01T23:59",
				quantity: 20
			},
			{
				id: 11,
				name: "測試票",
				saleStart: "2025-01-01T00:00",
				saleEnd: "2026-03-07T00:00",
				quantity: "不限定數量"
			}
		];

		// State management
		class TicketManager {
			constructor() {
				this.tickets = [...DEMO_TICKETS];
				this.editingRow = null;
				this.originalData = {};
				this.nextId = Math.max(...this.tickets.map(t => t.id)) + 1;
				this.init();
			}

			init() {
				this.renderTickets();
				this.bindEvents();
			}

			bindEvents() {
				// Add ticket button
				document.getElementById("add-ticket-btn").addEventListener("click", () => this.addNewTicket());
				// Table actions
				document.getElementById("tickets-tbody").addEventListener("click", e => {
					const btn = e.target.closest("button[data-action]");
					if (!btn) return;
					const action = btn.dataset.action;
					if (action === "edit") this.editRow(btn);
					if (action === "delete") this.deleteRow(btn);
				});
				// Modal form
				document.getElementById("ticket-form").addEventListener("submit", e => {
					e.preventDefault();
					this.saveFromModal();
				});
				document.getElementById("ticket-cancel-btn").addEventListener("click", () => this.closeModal());
				// Overlay click close (outside modal)
				document.getElementById("ticket-modal-overlay").addEventListener("click", e => {
					if (e.target.id === "ticket-modal-overlay") this.closeModal();
				});
			}

			renderTickets() {
				const tbody = document.getElementById("tickets-tbody");
				tbody.innerHTML = "";

				this.tickets.forEach(ticket => {
					const row = this.createTicketRow(ticket);
					tbody.appendChild(row);
				});
			}

			createTicketRow(ticket) {
				const template = document.getElementById("ticket-row-template");
				const row = template.content.cloneNode(true).querySelector("tr");
				row.dataset.ticketId = ticket.id;
				const cells = row.querySelectorAll("td");
				cells[0].querySelector(".ticket-label").textContent = ticket.name;
				cells[1].querySelector(".sale-start").textContent = ticket.saleStart ? this.formatDateTime(ticket.saleStart) : "";
				cells[2].querySelector(".sale-end").textContent = ticket.saleEnd ? this.formatDateTime(ticket.saleEnd) : "";
				const statusBadge = cells[3].querySelector(".status-badge");
				const status = this.computeStatus(ticket);
				statusBadge.textContent = status.label;
				statusBadge.className = `status-badge ${status.class}`;
				cells[4].querySelector(".quantity-value").textContent = ticket.quantity;
				return row;
			}

			editRow(button) {
				const row = button.closest("tr");
				const ticketId = parseInt(row.dataset.ticketId);
				const ticket = this.tickets.find(t => t.id === ticketId);
				this.openModal(ticket);
			}

			saveFromModal() {
				const name = document.getElementById("ticket-name-input").value.trim();
				const saleStart = document.getElementById("ticket-start-input").value || null;
				const saleEnd = document.getElementById("ticket-end-input").value || null;
				const quantityRaw = document.getElementById("ticket-quantity-input").value;
				if (!name) {
					alert("請輸入票種名稱");
					return;
				}
				const quantity = quantityRaw === "" ? "不限定數量" : parseInt(quantityRaw);
				if (saleStart && saleEnd && new Date(saleStart) > new Date(saleEnd)) {
					alert("開始時間不可晚於結束時間");
					return;
				}
				if (this.currentEditingId) {
					const idx = this.tickets.findIndex(t => t.id === this.currentEditingId);
					if (idx !== -1) this.tickets[idx] = { ...this.tickets[idx], name, saleStart, saleEnd, quantity };
				} else {
					this.tickets.push({ id: this.nextId++, name, saleStart, saleEnd, quantity });
				}
				this.renderTickets();
				this.closeModal();
			}

			// Removed inline cancelEdit logic; modal handles cancel via closeModal

			deleteRow(button) {
				if (!confirm("確定要刪除這個票種嗎？")) return;

				const row = button.closest("tr");
				const ticketId = parseInt(row.dataset.ticketId);

				if (ticketId) {
					this.tickets = this.tickets.filter(t => t.id !== ticketId);
					console.log("Deleting ticket:", ticketId);
				}

				row.remove();
			}

			addNewTicket() {
				this.openModal(null);
			}

			// (Old inline edit helpers removed)

			openModal(ticket) {
				this.currentEditingId = ticket ? ticket.id : null;
				const overlay = document.getElementById("ticket-modal-overlay");
				const title = document.getElementById("ticket-modal-title");
				const nameInput = document.getElementById("ticket-name-input");
				const startInput = document.getElementById("ticket-start-input");
				const endInput = document.getElementById("ticket-end-input");
				const quantityInput = document.getElementById("ticket-quantity-input");
				const statusDisplay = document.getElementById("ticket-status-display");

				if (ticket) {
					title.textContent = "編輯票種";
					nameInput.value = ticket.name;
					startInput.value = ticket.saleStart || "";
					endInput.value = ticket.saleEnd || "";
					quantityInput.value = ticket.quantity === "不限定數量" ? "" : ticket.quantity;
					const status = this.computeStatus(ticket);
					statusDisplay.textContent = status.label;
					statusDisplay.className = `status-badge ${status.class}`;
				} else {
					title.textContent = "新增票種";
					nameInput.value = "";
					startInput.value = "";
					endInput.value = "";
					quantityInput.value = "";
					statusDisplay.textContent = "--";
					statusDisplay.className = "status-badge";
				}

				overlay.style.display = "flex";
				nameInput.focus();
			}

			closeModal() {
				document.getElementById("ticket-modal-overlay").style.display = "none";
				this.currentEditingId = null;
			}

			renderTickets() {
				const tbody = document.getElementById("tickets-tbody");
				tbody.innerHTML = "";
				this.tickets.forEach(t => tbody.appendChild(this.createTicketRow(t)));
			}

			computeStatus(ticket) {
				const now = new Date();
				if (ticket.saleStart && new Date(ticket.saleStart) > now) {
					return { label: "尚未開始", class: "pending" };
				}
				if (ticket.saleEnd && new Date(ticket.saleEnd) < now) {
					return { label: "結束販售", class: "ended" };
				}
				return { label: "販售中", class: "active" };
			}

			formatDateTime(dt) {
				if (!dt) return "";
				try {
					const d = new Date(dt);
					if (Number.isNaN(d.getTime())) return dt;
					const yyyy = d.getFullYear();
					const mm = String(d.getMonth() + 1).padStart(2, "0");
					const dd = String(d.getDate()).padStart(2, "0");
					const hh = String(d.getHours()).padStart(2, "0");
					const mi = String(d.getMinutes()).padStart(2, "0");
					return `${yyyy}/${mm}/${dd} ${hh}:${mi}`;
				} catch (e) {
					return dt;
				}
			}
		}

		// Initialize when DOM is loaded
		document.addEventListener("astro:page-load", () => {
			if (!window.location.pathname.endsWith("/admin/tickets/")) return;
			new TicketManager();
		});
	</script>

	<style>
		.ticket-overview {
			margin-top: 2rem;
		}

		/* Modal styles */
		.modal-overlay {
			position: fixed;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background: rgba(0, 0, 0, 0.5);
			display: flex;
			align-items: center;
			justify-content: center;
			z-index: 1000;
			padding: 1rem;
		}
		.modal {
			background: var(--color-gray-800);
			color: var(--color-gray-100);
			border: 2px solid var(--color-gray-700);
			border-radius: 12px;
			padding: 1.5rem 1.75rem 1.75rem;
			max-width: 640px;
			width: 100%;
			box-shadow: 0 10px 30px rgba(0, 0, 0, 0.35);
		}
		.modal h2 {
			margin-top: 0;
			font-size: 1.25rem;
		}
		.form-grid {
			display: grid;
			grid-template-columns: 1fr 1fr;
			gap: 1rem 1.25rem;
			margin-top: 1rem;
		}
		.form-grid label {
			display: flex;
			flex-direction: column;
			gap: 0.4rem;
			font-size: 0.85rem;
		}
		.form-grid input {
			padding: 0.5rem 0.6rem;
			border: 1px solid var(--color-gray-600);
			background: var(--color-gray-900);
			color: inherit;
			border-radius: 6px;
			font-family: inherit;
		}
		.form-grid input:focus {
			outline: none;
			border-color: #ffc107;
			box-shadow: 0 0 0 2px rgba(255, 193, 7, 0.25);
		}
		.status-readonly {
			display: flex;
			align-items: center;
			gap: 0.5rem;
			font-size: 0.9rem;
		}
		.modal-actions {
			display: flex;
			gap: 0.75rem;
			margin-top: 1.5rem;
			justify-content: flex-end;
		}
		.button.primary {
			background: #ffc107;
			border-color: #e0a800;
			color: #2a2416;
		}
		.button.primary:hover {
			background: #ffb507;
		}
		.status-badge.pending {
			background: #fff3cd;
			color: #856404;
			border: 1px solid #ffe8a1;
		}
		/* Reuse existing .status-badge.active/.ended styles */
		@media (max-width: 640px) {
			.form-grid {
				grid-template-columns: 1fr;
			}
		}

		.ticket-overview h2 {
			margin-bottom: 1.5rem;
			font-size: 1.5rem;
			color: var(--color-gray-200);
		}

		.table-container {
			overflow-x: auto;
			border-radius: 8px;
			box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
			background-color: var(--color-gray-800);
			border: 2px solid var(--color-gray-900);
		}

		.tickets-table {
			width: 100%;
			border-collapse: collapse;
			min-width: 900px;
		}

		.tickets-table th,
		.tickets-table td {
			padding: 1rem;
			text-align: left;
			border-bottom: 1px solid var(--color-gray-400);
		}

		.tickets-table th {
			background-color: var(--color-gray-700);
			color: var(--color-gray-200);
			font-weight: 600;
			font-size: 0.95rem;
			position: sticky;
			top: 0;
		}

		.tickets-table tr:last-child td {
			border-bottom: none;
		}

		.tickets-table tr:hover {
			background-color: #f8f9fa;
		}

		.time-cell {
			font-size: 0.9rem;
			line-height: 1.4;
		}

		.ticket-name {
			max-width: 10rem;
		}

		.actions-cell {
			width: 200px;
			min-width: 200px;
		}

		.action-buttons {
			display: flex;
			gap: 0.5rem;
			flex-wrap: wrap;
		}

		.action-buttons .button {
			padding: 0.25rem 0.5rem;
			font-size: 0.85rem;
			margin: 0;
			white-space: nowrap;
		}

		.delete {
			background-color: #f8d7da;
			border-color: #f5c6cb;
			color: #721c24;
		}

		.delete:hover {
			background-color: #f1b0b7;
		}

		.edit-input {
			width: 100%;
			padding: 0.4rem;
			border: 1px solid #ccc;
			border-radius: 4px;
			font-size: 0.9rem;
			font-family: inherit;
			box-sizing: border-box;
		}

		.edit-input:focus {
			outline: none;
			border-color: var(--color-gray-900);
			box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);
		}

		.status-badge {
			padding: 0.3rem 0.6rem;
			border-radius: 4px;
			font-size: 0.85rem;
			font-weight: 500;
			white-space: nowrap;
			display: inline-block;
		}

		.status-badge.active {
			background-color: #d4edda;
			color: #155724;
			border: 1px solid #c3e6cb;
		}

		.status-badge.ended {
			background-color: #f8d7da;
			color: #721c24;
			border: 1px solid #f5c6cb;
		}

		.add-ticket-section {
			margin-top: 2rem;
			text-align: center;
		}

		.add-ticket-btn {
			padding: 0.8rem 1.5rem;
			font-size: 1rem;
			background-color: #d4edda;
			border-color: #c3e6cb;
			color: #155724;
		}

		.add-ticket-btn:hover {
			background-color: #c3e6cb;
		}

		/* New ticket row specific styles */
		.tickets-table tr[data-editing="true"] {
			background-color: #fffbf0;
			border-left: 4px solid #ffc107;
		}

		.tickets-table tr[data-editing="true"] .edit-input {
			border-color: #ffc107;
		}

		.tickets-table tr[data-editing="true"] .edit-input:focus {
			border-color: #e0a800;
			box-shadow: 0 0 0 2px rgba(255, 193, 7, 0.25);
		}

		/* Responsive design for mobile */
		@media (max-width: 768px) {
			.table-container {
				border: none;
				box-shadow: none;
			}

			.tickets-table {
				min-width: unset;
			}

			.tickets-table,
			.tickets-table thead,
			.tickets-table tbody,
			.tickets-table th,
			.tickets-table td,
			.tickets-table tr {
				display: block;
			}

			.tickets-table thead tr {
				position: absolute;
				top: -9999px;
				left: -9999px;
			}

			.tickets-table tr {
				border: 2px solid var(--color-gray-900);
				margin-bottom: 1rem;
				border-radius: 8px;
				background-color: var(--color-gray-800);
			}

			.tickets-table tr[data-editing="true"] {
				border-color: #ffc107;
				background-color: #fffbf0;
			}

			.tickets-table td {
				border: none;
				position: relative;
				padding: 0.8rem 1rem;
				border-bottom: 1px solid var(--color-gray-400);
			}

			.tickets-table td:last-child {
				border-bottom: none;
			}

			.tickets-table td:before {
				content: attr(data-label) ": ";
				font-weight: 600;
				color: var(--color-gray-900);
				margin-right: 0.5rem;
			}

			.actions-cell:before {
				content: "操作: ";
			}

			.action-buttons {
				flex-direction: column;
				gap: 0.3rem;
			}

			.action-buttons .button {
				width: 100%;
				text-align: center;
			}

			.edit-input {
				margin-top: 0.3rem;
				width: calc(100% - 0.6rem);
			}

			.time-cell {
				max-width: unset;
			}

			.status-badge {
				display: inline-block;
				margin-top: 0.2rem;
			}
		}

		@media (max-width: 480px) {
			main {
				margin-left: 1rem;
				padding: 1rem;
			}

			.tickets-table td {
				padding: 0.6rem 0.8rem;
			}

			.time-cell {
				font-size: 0.85rem;
			}

			.action-buttons .button {
				font-size: 0.8rem;
				padding: 0.4rem 0.6rem;
			}
		}

		/* Dark mode adjustments */
		@media (prefers-color-scheme: dark) {
			.tickets-table tr:hover {
				background-color: var(--color-gray-700);
			}

			.tickets-table tr[data-editing="true"] {
				background-color: #2a2416;
				border-left-color: #ffc107;
			}

			.tickets-table td {
				border-bottom-color: var(--color-gray-600);
			}

			.status-badge.active {
				background-color: #1e3a2e;
				color: #4ade80;
				border-color: #16a34a;
			}

			.status-badge.ended {
				background-color: #3a1e1e;
				color: #f87171;
				border-color: #dc2626;
			}

			.delete {
				background-color: #3a1e1e;
				border-color: #dc2626;
				color: #f87171;
			}

			.delete:hover {
				background-color: #4a1e1e;
			}

			.add-ticket-btn {
				background-color: #1e3a2e;
				border-color: #16a34a;
				color: #4ade80;
			}

			.add-ticket-btn:hover {
				background-color: #2e4a3e;
			}

			.edit-input {
				background-color: var(--color-gray-800);
				border-color: #555;
			}

			.edit-input:focus {
				border-color: var(--color-gray-800);
				box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.1);
			}

			.tickets-table tr[data-editing="true"] .edit-input {
				border-color: #ffc107;
			}

			.tickets-table tr[data-editing="true"] .edit-input:focus {
				border-color: #e0a800;
				box-shadow: 0 0 0 2px rgba(255, 193, 7, 0.25);
			}

			@media (max-width: 768px) {
				.tickets-table tr {
					border-color: var(--color-gray-800);
				}

				.tickets-table tr[data-editing="true"] {
					border-color: #ffc107;
					background-color: #2a2416;
				}

				.tickets-table td {
					border-bottom-color: var(--color-gray-600);
				}
			}
		}
	</style>
</Layout>
