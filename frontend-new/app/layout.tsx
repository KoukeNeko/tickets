import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { defaultLocale } from "@/lib/i18n/config";
import { localesList, l } from "@/lib/i18n";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

interface Props {
  i18n?: string[];
  path?: string;
  favicon?: boolean;
  ga?: boolean;
  title?: string;
  description?: string;
  image?: string;
  theme?: string;
  lang?: string;
}

const { i18n = [], path = "", favicon = true, ga = true, title = "", description = "", image = "", theme = "#000", lang = defaultLocale } = { /* props here */ } as Props;
const site = process.env.SITE;
const links = i18n
  .map(lang => {
    const url = lang === defaultLocale ? "" : "/" + lang;
    return `<link rel="alternate" hreflang="${lang}" href="${site}${url}/${path}" />`;
  })
  .join("\n");
const xDefault = `<link rel="alternate" hreflang="x-default" href="${site}/${path}" />`;
const canonical = `${site}/${path}`;
const fullImage = image?.startsWith("http") ? image : image ? `${site}${image}` : null;
const supportedLangs = localesList();

export const metadata: Metadata = {
  title: title || "Create Next App",
  description: description || "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang={lang}>
      <head>
        <meta charSet="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="generator" content="Next.js" />

        {title && <title>{title}</title>}
        {description && <meta name="description" content={description} />}
        {title && <meta property="og:title" content={title} />}
        {canonical && <meta property="og:url" content={canonical} />}
        {fullImage && image && <meta property="og:image" content={fullImage} />}
        {description && <meta property="og:description" content={description} />}
        {theme && <meta name="theme-color" content={theme} />}
        
        {/* i18n alternate links */}
        <script dangerouslySetInnerHTML={{ __html: `${links}\n${xDefault}` }} />

        {/* Google Analytics */}
        {ga && (
          <>
            <script async src="https://www.googletagmanager.com/gtag/js?id=G-9R5PZG2VQG" />
            <script>
              {`window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'G-GVRT4CHSQJ');`}
            </script>
          </>
        )}
      </head>
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        {children}
        <script>
          {`document.querySelectorAll("[data-lang]").forEach(link => {
            link.addEventListener("click", function (e) {
              const lang = link.getAttribute("data-lang");
              if (supportedLangs.includes(lang)) localStorage.setItem("preferredLang", lang);
            });
          });`}
        </script>
      </body>
    </html>
  );
}
